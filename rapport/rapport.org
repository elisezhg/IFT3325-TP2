#+TITLE:IFT3325 Téléinformatique : Devoir 2
:EXPORT_OPTIONS:
#+OPTIONS: toc:nil
#+OPTIONS: author:nil
#+OPTIONS: date:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: num:nil
:END:
Alexandre Gravel
Elise Zheng
* Diagramme de classes
[[file:Diagramme de classe.png]]
* Classes
** BitStuffer
Contient les méthodes statiques nécessaires au bitstuffing.
*** _+stuff(bitstring:String):String_
Prends en paramètre une chaine de '0' et '1' sous forme
de String et retourne la même chaine où chaque suite de
cinq '1' est maintenant suivie d'un '0'.
***  _+destuff(bitstring:String):String_
L'inverse à gauche de la fonction ~stuff(String)~ en retirant
tous les '1' qui suivent cinq '0'
de sorte que ~s==destuff(stuff(s))~.
** CharFrame
Trame orientée caractère capable de calculer un CRC pour son contenu et
d'effectuer du bitstuffing.
*** +CharFrame(type:char, data:String, polynomial:String)
Construit une trame à partir d'un type, de données et d'un polynôme
utilisé pour le contrôle d'erreur. Le numéro de la trame
doit être ajouté via la méthode ~setNum(int)~.
*** +CharFrame(frame:String, polynomial:String)
Construit une trame à partir d'une string de bits telle que
celle produite par la fonction ~format()~. Si la trame comprends des erreurs
lance une ~InvalidFrameException~.
*** _-padLeft(str:String, pad:char, targetlength:int):String_
Ajoute le ~pad~ au début de ~str~ autant de fois qu'il faut pour qu'elle
soit de taille au moins ~targetlength~.
*** -computeCRC()
Calcule le checksum pour la trame et le place dans le champ ~crc~.
*** +getType():char
Retourne le type de la trame.
*** +setType(type:char)
Assigne un type à la trame.
*** +getNum():int
Retourne le numéro de la trame.
*** +setNum(num:int)
Assigne un numéro qui doit être représentable sur
~NUM_BITSIZE~ bits à la trame.
*** +getData():String
Retourne les données de la trame.
*** +setData(String data)
Assigne de nouvelles données à la trame.
*** +format():String
Retourne la trame sous forme de chaine de bits.
*** +isValid():boolean
retourne vrai si le champs crc est correct.
** CheckSumCalculator
Contient les méthodes statiques nécessaires pour le calcul du CRC.
*** _-xor(s1:String, s2:String):String_
Retourne le XOR de deux chaines de bits.
La chaine la plus courte est allongée
de suffisamment de '0' pour que les deux
chaines soient de tailles égales.
*** _+cyclicDivisionRest(bitstring:String, polynomial:String):String_
Retourne le reste de la division mod 2 du polynome ~bitstring~
par le polynome ~polynomial~
*** _-padLeft(str:String, pad:char, targetlength:int):String_
Ajoute le ~pad~ au début de ~str~ autant de fois qu'il faut pour qu'elle
soit de taille au moins ~targetlength~.
*** _+computeCRC(bitstring:String, polynomial:String):String_
Calcule et retourne le Cyclical Redundancy Code.
** CLI
Interface utilisateur.
*** _+main(args:String[])_
Lance une invite de commande :
- ~Sender <Nom_Machine> <Numero_Port> <Nom_fichier> <0>~ : envoie un fichier à une
  machine sur un certain port avec Go-Back-N.
- ~Receiver <Numero_Port>~ : écoute sur le port spécifié.
- ~test~ : lance les tests
** FrameFileReader
*** +FrameFileReader(filename:String, polynomial:String)
Ouvre un fichier où chaque ligne pourra être retournée sous
forme de trame.
*** +getNextFrame():CharFrame
Retourne la prochaine ligne du fichier sous forme de trame orientée caractère.
** InvalidFrameException
Exception signalant une trame malformée, comportant une erreur.
*** +run()
envoie un poll par le Printwriter.
** FrameFileWriter
*** +FrameFileWriter()
Créé un nouveau fichier avec la date du jour dans lequel
on peut écrire les données des trames.
*** +write(frame:CharFrame)
Ecrit les données de la trame dans le fichier.
*** +close()
Ferme le fichier.
** Receiver
*** +Receiver(portNumber:int)
Ouvre une serverSocket qui écoute sur le port spécifié.
*** +close()
Ferme toute connexion.
*** +listen()
Accepte une connexion et traite les requêtes d'un ~Sender~.
*** -sendReceipt(type:char, num:int)
Sous-routine de ~listen()~. Envoie un RR ou un REJ.
** Sender
*** +Sender(hostName:String, portNumber:int)
Tente d'ouvrir une connexion avec l'hôte spécifié sur le
port spécifié.
*** -connect()
Envoie une demande de connexion et attend la confirmation.
Envoie un poll si l'attente dépasse 3 secondes.
*** -awaitRR()
Attend qu'une trame reçoive une confirmation ou un rejet
et traite la réponse.
Envoie un poll si l'attente dépasse 3 secondes.
*** +send(filename:String)
Envoie le contenu d'un fichier sous forme de trames.
*** +close()
Ferme la connexion.
** Test
*** runTests()
Lance les tests.
